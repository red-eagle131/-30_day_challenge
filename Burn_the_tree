Node* findTargetNodeAndGetParent(Node* root,int target,unordered_map<Node*,Node*>& parent)
    {
        queue<Node*>q;
        q.push(root);
        Node* tar=NULL;
        bool check=0;
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                Node* temp=q.front();
                q.pop();
                if(temp->data==target && check==0)
                {
                   tar=temp;
                   check=1;
                }   
                if(temp->left != NULL)
                {
                    parent[temp->left]=temp;
                    q.push(temp->left);
                }   
                if(temp->right != NULL)
                {
                    parent[temp->right]=temp;
                    q.push(temp->right);
                }   
            }
        }
        return tar;
   }
   
   int minTime(Node* root, int target) 
   {
        unordered_map<Node*,Node*> parent;
        Node* tar = findTargetNodeAndGetParent(root,target,parent);
        if(tar==NULL)
            return 0;
        unordered_set<Node*>visited;
        int seconds=0;
        queue<Node*>q;
        q.push(tar);
        while(!q.empty())
        {
            int find=0;
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                Node* temp=q.front();
                q.pop();
                visited.insert(temp);
                if((parent[temp]) && (visited.find(parent[temp]) == visited.end()))
                {
                    q.push(parent[temp]);
                    find=1;
                }   
                if((temp->left != NULL) && (visited.find(temp->left)==visited.end())) 
                {   
                    q.push(temp->left);
                    find=1;
                }  
                if((temp->right != NULL) && (visited.find(temp->right)==visited.end()))
                {    
                    q.push(temp->right);
                    find=1;  
                }  
            }
            if(find) 
            seconds++;
        }
        return seconds;
   }
