int divide(int dividend, int divisor) {                     //WHEN LONG LONG IS ALLOWED
        if(dividend==0) 
        return 0;
        long long res = double(exp(log(fabs(dividend)) - log(fabs(divisor))));
        if((dividend<0)^(divisor<0)) 
        res=-res;
        if(res>INT_MAX) 
        res=INT_MAX;
        return res;
    }
    
    
    
    
    
    
    int divide(int dividend, int divisor) {       // WHEN ONLY 32 BITS ARE ALLOWED
        if(dividend == divisor)
            return 1;
        bool isPositive = (dividend<0 == divisor<0);    
        unsigned int a = abs(dividend);
        unsigned int b = abs(divisor);
        unsigned int ans = 0;
        while(a >= b){  
            short q = 0;
            while(a > (b<<(q+1)))
                q++;
            ans += (1<<q);  
            a = a - (b<<q);
        }
        if(ans >= (1<<31) and isPositive)
            return INT_MAX;
        return isPositive ? ans : -ans;
    }
