bool iscycle(vector<int>adj[],vector<int>&vis,int id)
    {
        if(vis[id]==1)
        return true;
        if(vis[id]==0)
        {
            vis[id]=1;
            for(auto edge:adj[id])
            {
                if(iscycle(adj,vis,edge))
                return true;
            }
        }
        vis[id]=2;
        return false;
    }
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    int n=prerequisites.size();
	    vector<int>adj[N];
	    for(int i=0;i<n;i++)
	    {
	        pair<int,int>p=prerequisites[i];
	        int b=p.first;
	        int c=p.second;
	        adj[c].push_back(b);
	    }
	    vector<int>vis(N,0);
        for(int i=0;i<N;i++)
        {
            if(iscycle(adj,vis,i))
            return false;
        }
        return true;
	}
